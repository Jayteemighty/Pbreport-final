# Generated by Django 4.2.10 on 2024-03-07 15:19

import accounts.managers
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        error_messages={"unique": "That username is not available"},
                        max_length=20,
                        null=True,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={"unique": "That email is not available"},
                        max_length=100,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="last name"),
                ),
                (
                    "prefix",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Mrs.", "Mrs"),
                            ("Mr.", "Mr"),
                            ("Ms.", "Ms"),
                            ("Miss.", "Miss"),
                            ("Mx.", "Mx"),
                            ("Dr.", "Dr"),
                            ("Prof.", "Prof"),
                            ("Rev.", "Rev"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="prefix",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+\\d{8,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="job_title"
                    ),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="company"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, max_length=100, null=True, verbose_name="website"
                    ),
                ),
                (
                    "blog",
                    models.URLField(
                        blank=True, max_length=100, null=True, verbose_name="blog"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        default="GB",
                        max_length=2,
                        null=True,
                        verbose_name="country",
                    ),
                ),
                (
                    "postal_code",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="postal_code"
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        default=False, verbose_name="is_email_verified"
                    ),
                ),
                (
                    "email_verified_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="email_verified_at"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", accounts.managers.UserManager()),
            ],
        ),
    ]
